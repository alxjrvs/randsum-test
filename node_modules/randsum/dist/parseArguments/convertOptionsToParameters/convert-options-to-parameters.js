"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertOptionsToParameters = void 0;
var convert_cap_options_to_parameters_1 = require("./convert-cap-options-to-parameters");
var convert_drop_options_to_parameters_1 = require("./convert-drop-options-to-parameters");
var convert_replace_options_to_parameters_1 = require("./convert-replace-options-to-parameters");
var convert_reroll_options_to_parameters_1 = require("./convert-reroll-options-to-parameters");
function convertOptionsToParameters(_a) {
    var quantity = _a.quantity, sides = _a.sides, _b = _a.modifiers, modifiers = _b === void 0 ? [] : _b, restOptions = __rest(_a, ["quantity", "sides", "modifiers"]);
    var rollParameters = __assign({ sides: 1, quantity: 1 }, restOptions);
    if (quantity !== undefined) {
        rollParameters = __assign(__assign({}, rollParameters), { quantity: Number(quantity) });
    }
    if (sides !== undefined) {
        rollParameters = __assign(__assign({}, rollParameters), { sides: Number(sides) });
    }
    for (var _i = 0, modifiers_1 = modifiers; _i < modifiers_1.length; _i++) {
        var modifier = modifiers_1[_i];
        var key = Object.keys(modifier)[0];
        var value = Object.values(modifier)[0];
        var _c = rollParameters.modifiers, modifiers_2 = _c === void 0 ? [] : _c, restParameters = __rest(rollParameters, ["modifiers"]);
        switch (key) {
            case 'cap':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers_2, true), [{ cap: (0, convert_cap_options_to_parameters_1.convertCapOptionsToParameters)(value) }], false) });
                break;
            case 'drop':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers_2, true), [{ drop: (0, convert_drop_options_to_parameters_1.convertDropOptionsToParameters)(value) }], false) });
                break;
            case 'reroll':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers_2, true), [
                        {
                            reroll: Array.isArray(value)
                                ? value.map(function (option) { return (0, convert_reroll_options_to_parameters_1.convertRerollOptionsToParameters)(option); })
                                : (0, convert_reroll_options_to_parameters_1.convertRerollOptionsToParameters)(value),
                        },
                    ], false) });
                break;
            case 'replace':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers_2, true), [
                        {
                            replace: Array.isArray(value)
                                ? value.map(function (option) { return (0, convert_replace_options_to_parameters_1.convertReplaceOptionsToParameters)(option); })
                                : (0, convert_replace_options_to_parameters_1.convertReplaceOptionsToParameters)(value),
                        },
                    ], false) });
                break;
            case 'unique':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers_2, true), [
                        {
                            unique: typeof value === 'object'
                                ? { notUnique: value.notUnique.map(function (number) { return Number(number); }) }
                                : value,
                        },
                    ], false) });
                break;
            case 'explode':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers_2, true), [{ explode: value }], false) });
                break;
            case 'plus':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers_2, true), [{ plus: Number(value) }], false) });
                break;
            case 'minus':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers_2, true), [{ minus: Number(value) }], false) });
                break;
        }
    }
    return rollParameters;
}
exports.convertOptionsToParameters = convertOptionsToParameters;
//# sourceMappingURL=convert-options-to-parameters.js.map