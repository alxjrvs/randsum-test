"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseReplaceNotation = void 0;
function parseReplaceNotation(notationString) {
    var replaceOptions = notationString
        .split('v')[1]
        .replace(/{/g, '')
        .replace(/}/g, '')
        .split(',')
        .map(function (replacement) {
        var _a = replacement.split('='), noteFrom = _a[0], noteTo = _a[1];
        var baseReplacement = { to: Number(noteTo) };
        switch (true) {
            case noteFrom.includes('>'):
                return __assign(__assign({}, baseReplacement), { from: { greaterThan: Number(noteFrom.replace('>', '')) } });
            case noteFrom.includes('<'):
                return __assign(__assign({}, baseReplacement), { from: { lessThan: Number(noteFrom.replace('<', '')) } });
            default:
                return __assign(__assign({}, baseReplacement), { from: Number(noteFrom) });
        }
    });
    return { replace: replaceOptions.length === 1 ? replaceOptions[0] : replaceOptions };
}
exports.parseReplaceNotation = parseReplaceNotation;
//# sourceMappingURL=parse-replace-notation.js.map