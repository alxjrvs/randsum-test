"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseRerollNotation = void 0;
function parseRerollNotation(notationString) {
    var parsedString = notationString.split('r')[1].replace(/{/g, '').replace(/}/g, ',!').split(',');
    var rerollParameters = {};
    for (var _i = 0, parsedString_1 = parsedString; _i < parsedString_1.length; _i++) {
        var notation = parsedString_1[_i];
        if (notation === '!') {
            continue;
        }
        if (notation.includes('<')) {
            rerollParameters = __assign(__assign({}, rerollParameters), { lessThan: Number(notation.split('<')[1]) });
            continue;
        }
        if (notation.includes('>')) {
            rerollParameters = __assign(__assign({}, rerollParameters), { greaterThan: Number(notation.split('>')[1]) });
            continue;
        }
        if (notation.includes('!')) {
            rerollParameters = __assign(__assign({}, rerollParameters), { maxReroll: Number(notation.split('!')[1]) });
            continue;
        }
        rerollParameters = __assign(__assign({}, rerollParameters), { exact: __spreadArray(__spreadArray([], (Array.isArray(rerollParameters === null || rerollParameters === void 0 ? void 0 : rerollParameters.exact) ? rerollParameters.exact : []), true), [
                Number(notation),
            ], false) });
    }
    return { reroll: rerollParameters };
}
exports.parseRerollNotation = parseRerollNotation;
//# sourceMappingURL=parse-reroll-notation.js.map