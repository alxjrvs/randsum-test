"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRolls = void 0;
var applicators_1 = require("./applicators");
function generateRolls(rollTotals, rollParameters, rollOne) {
    var modifiedRollTotals = __spreadArray([], rollTotals, true);
    var unique = rollParameters.unique, explode = rollParameters.explode, reroll = rollParameters.reroll, plus = rollParameters.plus, minus = rollParameters.minus, cap = rollParameters.cap, sides = rollParameters.sides, rolls = rollParameters.rolls, replace = rollParameters.replace, drop = rollParameters.drop;
    if (reroll !== undefined) {
        modifiedRollTotals = (0, applicators_1.applyReroll)(modifiedRollTotals, reroll, rollOne);
    }
    if (unique !== undefined) {
        modifiedRollTotals = (0, applicators_1.applyUnique)(modifiedRollTotals, { sides: sides, rolls: rolls, unique: unique }, rollOne);
    }
    if (replace !== undefined) {
        modifiedRollTotals = (0, applicators_1.applyReplace)(modifiedRollTotals, replace);
    }
    if (cap !== undefined) {
        modifiedRollTotals = modifiedRollTotals.map((0, applicators_1.applySingleCap)(cap));
    }
    if (drop !== undefined) {
        modifiedRollTotals = (0, applicators_1.applyDrop)(modifiedRollTotals, drop);
    }
    if (explode !== undefined) {
        modifiedRollTotals = (0, applicators_1.applyExplode)(modifiedRollTotals, { sides: sides }, rollOne);
    }
    var modifiedTotal = Number(__spreadArray([], modifiedRollTotals, true).reduce(function (total, roll) { return total + roll; }, 0));
    if (plus !== undefined) {
        modifiedTotal = modifiedTotal + plus;
    }
    if (minus !== undefined) {
        modifiedTotal = modifiedTotal - Math.abs(minus);
    }
    return [modifiedTotal, modifiedRollTotals.map(function (number) { return Number(number); })];
}
exports.generateRolls = generateRolls;
//# sourceMappingURL=generate-rolls.js.map