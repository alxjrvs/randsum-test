"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDropConstraintsNotation = void 0;
function parseDropConstraintsNotation(notationString) {
    var dropConstraintParameters = { exact: [] };
    var constraints = notationString.split('d')[1].replace(/{/g, '').replace(/}/g, '').split(',');
    for (var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++) {
        var constraint = constraints_1[_i];
        if (constraint.includes('<')) {
            dropConstraintParameters = __assign(__assign({}, dropConstraintParameters), { lessThan: Number(constraint.split('<')[1]) });
            continue;
        }
        if (constraint.includes('>')) {
            dropConstraintParameters = __assign(__assign({}, dropConstraintParameters), { greaterThan: Number(constraint.split('>')[1]) });
            continue;
        }
        dropConstraintParameters = __assign(__assign({}, dropConstraintParameters), { exact: __spreadArray(__spreadArray([], (Array.isArray(dropConstraintParameters === null || dropConstraintParameters === void 0 ? void 0 : dropConstraintParameters.exact) ? dropConstraintParameters.exact : []), true), [
                Number(constraint),
            ], false) });
    }
    return { drop: dropConstraintParameters };
}
exports.parseDropConstraintsNotation = parseDropConstraintsNotation;
//# sourceMappingURL=parse-drop-contstraints-notation.js.map