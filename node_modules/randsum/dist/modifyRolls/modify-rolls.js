"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyRolls = void 0;
var applicators_1 = require("./applicators");
function modifyRolls(rolls, rollParameters, rollOne) {
    var modifiedRollTotals = __spreadArray([], rolls, true);
    var simpleMathModifier = 0;
    var sides = rollParameters.sides, quantity = rollParameters.quantity, _a = rollParameters.modifiers, modifiers = _a === void 0 ? [] : _a;
    for (var _i = 0, modifiers_1 = modifiers; _i < modifiers_1.length; _i++) {
        var modifier = modifiers_1[_i];
        var key = Object.keys(modifier)[0];
        var value = Object.values(modifier)[0];
        switch (key) {
            case 'reroll':
                modifiedRollTotals = (0, applicators_1.applyReroll)(modifiedRollTotals, value, rollOne);
                break;
            case 'unique':
                modifiedRollTotals = (0, applicators_1.applyUnique)(modifiedRollTotals, { sides: sides, quantity: quantity, unique: value }, rollOne);
                break;
            case 'replace':
                modifiedRollTotals = (0, applicators_1.applyReplace)(modifiedRollTotals, value);
                break;
            case 'cap':
                modifiedRollTotals = modifiedRollTotals.map((0, applicators_1.applySingleCap)(value));
                break;
            case 'drop':
                modifiedRollTotals = (0, applicators_1.applyDrop)(modifiedRollTotals, value);
                break;
            case 'explode':
                modifiedRollTotals = (0, applicators_1.applyExplode)(modifiedRollTotals, { sides: sides }, rollOne);
                break;
            case 'plus':
                simpleMathModifier = simpleMathModifier + Number(value);
                break;
            case 'minus':
                simpleMathModifier = simpleMathModifier - Math.abs(Number(value));
                break;
        }
    }
    var total = Number(__spreadArray([], modifiedRollTotals, true).reduce(function (total, roll) { return total + roll; }, 0)) + simpleMathModifier;
    return {
        total: total,
        rolls: modifiedRollTotals,
        rollParameters: rollParameters,
        initialRolls: rolls,
    };
}
exports.modifyRolls = modifyRolls;
//# sourceMappingURL=modify-rolls.js.map