"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseNotation = void 0;
var utils_1 = require("../utils");
var notationParsers_1 = require("./notationParsers");
function parseNotation(notationString) {
    var rollParameters = { sides: 1, quantity: 1 };
    for (var _i = 0, _a = (0, utils_1.findMatches)(notationString.toLowerCase().replace(' ', '')); _i < _a.length; _i++) {
        var match = _a[_i];
        var key = Object.keys(match)[0];
        var value = Object.values(match)[0];
        var _b = rollParameters.modifiers, modifiers = _b === void 0 ? [] : _b, restParameters = __rest(rollParameters, ["modifiers"]);
        switch (key) {
            case 'coreNotationMatch':
                rollParameters = __assign(__assign({}, rollParameters), (0, notationParsers_1.parseCoreNotation)(value));
                break;
            case 'dropHighMatch':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers, true), [(0, notationParsers_1.parseDropHighNotation)(value)], false) });
                break;
            case 'dropLowMatch':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers, true), [(0, notationParsers_1.parseDropLowNotation)(value)], false) });
                break;
            case 'dropConstraintsMatch':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers, true), [(0, notationParsers_1.parseDropConstraintsNotation)(value)], false) });
                break;
            case 'explodeMatch':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers, true), [{ explode: Boolean(value) }], false) });
                break;
            case 'uniqueMatch':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers, true), [(0, notationParsers_1.parseUniqueNotation)(value)], false) });
                break;
            case 'replaceMatch':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers, true), [(0, notationParsers_1.parseReplaceNotation)(value)], false) });
                break;
            case 'rerollMatch':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers, true), [(0, notationParsers_1.parseRerollNotation)(value)], false) });
                break;
            case 'capMatch':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers, true), [(0, notationParsers_1.parseCapNotation)(value)], false) });
                break;
            case 'plusMatch':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers, true), [{ plus: Number(value.split('+')[1]) }], false) });
                break;
            case 'minusMatch':
                rollParameters = __assign(__assign({}, restParameters), { modifiers: __spreadArray(__spreadArray([], modifiers, true), [{ minus: Number(value.split('-')[1]) }], false) });
                break;
        }
    }
    return rollParameters;
}
exports.parseNotation = parseNotation;
//# sourceMappingURL=parse-notation.js.map