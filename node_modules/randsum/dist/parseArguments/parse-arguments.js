"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseArguments = void 0;
var convertOptionsToParameters_1 = require("./convertOptionsToParameters");
var parseNotation_1 = require("./parseNotation");
var utils_1 = require("./utils");
function parseArguments(primeArgument, secondArgument) {
    if (secondArgument === void 0) { secondArgument = {}; }
    var secondaryParameters = (0, convertOptionsToParameters_1.convertOptionsToParameters)(secondArgument);
    if ((0, utils_1.isDiceNotation)(primeArgument)) {
        return __assign(__assign({}, secondaryParameters), (0, parseNotation_1.parseNotation)(primeArgument));
    }
    if ((0, utils_1.isOptions)(primeArgument)) {
        return __assign(__assign({ sides: 0, quantity: 1 }, secondaryParameters), (0, convertOptionsToParameters_1.convertOptionsToParameters)(primeArgument));
    }
    var sides = Number(primeArgument);
    if (Number.isNaN(Number(sides))) {
        throw new TypeError("Bad Argument: ".concat(String(primeArgument)));
    }
    return __assign(__assign({ quantity: 1 }, secondaryParameters), { sides: sides });
}
exports.parseArguments = parseArguments;
//# sourceMappingURL=parse-arguments.js.map