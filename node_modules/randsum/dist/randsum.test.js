"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var randsum_1 = require("./randsum");
describe('Randsum', function () {
    describe('with a string', function () {
        var result = (0, randsum_1.randsum)('20');
        test('returns a number as total', function () {
            expect(Number.isInteger(result)).toBe(true);
        });
    });
    describe('with a number', function () {
        var result = (0, randsum_1.randsum)(20);
        test('returns a number as total', function () {
            expect(Number.isInteger(result)).toBe(true);
        });
    });
    describe('with a modifier object', function () {
        var result = (0, randsum_1.randsum)({ sides: 20, quantity: 2, modifiers: [{ drop: { highest: 1 } }] });
        test('returns a number as total', function () {
            expect(Number.isInteger(result)).toBe(true);
        });
    });
    describe('with basic dice notation', function () {
        var result = (0, randsum_1.randsum)('2d20');
        test('returns a number as total', function () {
            expect(Number.isInteger(result)).toBe(true);
        });
    });
    var mockRandomizerRoll = 420;
    var mockRandomizer = function () { return mockRandomizerRoll; };
    describe('with a custom randomizer', function () {
        var result = (0, randsum_1.randsum)('2d20', { randomizer: mockRandomizer });
        test('expects total to be correct', function () {
            expect(result).toEqual(2 * mockRandomizerRoll);
        });
    });
    describe('with a detailed report', function () {
        var result = (0, randsum_1.randsum)('2d20', { detailed: true });
        test('result.rolls returns an array of results as rolls', function () {
            expect(result.rolls).toHaveLength(2);
            for (var _i = 0, _a = result.rolls; _i < _a.length; _i++) {
                var roll = _a[_i];
                expect(Number.isInteger(roll)).toBe(true);
            }
        });
        test('result.sides returns the number of sides of the dice rolled', function () {
            expect(result.rollParameters.sides).toBe(20);
        });
        test('result.quantity returns the number of dice rolled', function () {
            expect(result.rollParameters.quantity).toBe(2);
        });
    });
    describe('with bad parameters', function () {
        describe('like a random string', function () {
            test('it throws an error', function () {
                expect(function () {
                    // @ts-expect-error - Bad Argument Test
                    var result = (0, randsum_1.randsum)('GENDER HAS NO BEARING ON ABILITY');
                    return result;
                }).toThrow();
            });
        });
        describe('like an almost dice notation string', function () {
            test('it throws an error', function () {
                expect(function () {
                    // @ts-expect-error - Bad Argument Test
                    var result = (0, randsum_1.randsum)('4b20');
                    return result;
                }).toThrow();
            });
        });
    });
});
//# sourceMappingURL=randsum.test.js.map